stages:
- test
- migrate
- pre-build
- build
- deployment
- post-deployment

variables:
  VAR_KUBE_CONTEXT: $ENV

.prep-go-dir: &prep-go-dir
- mkdir -p $CI_PROJECT_DIR/.depcache
- export DEPCACHEDIR=$CI_PROJECT_DIR/.depcache
- mkdir -p $GOPATH/src/github.com/bukalapak
- ln -s $CI_PROJECT_DIR $GOPATH/src/github.com/bukalapak
- cd $GOPATH/src/github.com/bukalapak/$CI_PROJECT_NAME

test:
  stage: test
  image: registry.bukalapak.io/sre/gudang/golang:1.4.0
  services:
  - mysql:5.7
  variables:
    MYSQL_DATABASE: jenkins_jr_test
    MYSQL_ROOT_PASSWORD: mysql
  before_script: *prep-go-dir
  script:
  - i=0; until [ $i -gt 6 ] || nc -vz 127.0.0.1 3306 &>/dev/null; do sleep 10; i=$(($i+1)); echo $i; done
  - cp env.sample .env
  - export "DATABASE_TEST_PASSWORD=mysql"
  - make migrate-test
  - make test
  cache:
    key: depcache
    paths:
    - $CI_PROJECT_DIR/.depcache

compile:
  stage: pre-build
  image: registry.bukalapak.io/sre/gudang/golang:1.4.0
  only:
  - triggers
  before_script: *prep-go-dir
  script:
  - make compile
  artifacts:
    expire_in: 1 day
    paths:
    - deploy/_output
  cache:
    key: depcache
    paths:
    - $CI_PROJECT_DIR/.depcache
    policy: pull

notify-start:
  stage: build
  image: appropriate/curl
  allow_failure: true
  script:
  - curl -XGET "192.241.135.40:15474/notify_start?service=jenkins_jr&branch=$CI_COMMIT_TAG&deployer=${DEPLOYER//@}&roles=jenkins_jr-web-production&ci_pipeline_id=$CI_PIPELINE_ID"
  only:
  - triggers

build-image:
  stage: build
  image: registry.bukalapak.io/sre/gudang/docker:1.0.0
  tags:
  - build-image
  only:
  - triggers
  script:
  - export VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_SHA}
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - make build push

.deploy-template: &deploy-template
  stage: deployment
  image: registry.bukalapak.io/sre/gudang/deployment:2.2.0
  tags:
  - bare-metal
  only:
  - triggers
  script:
  - export VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_SHA}
  - kubectl config use-context $VAR_KUBE_CONTEXT
  - make deploy

deploy:
  <<: *deploy-template

deploy-cron:
  <<: *deploy-template
  when: manual
  variables:
    FILE: scheduledjob

deploy-service:
  <<: *deploy-template
  allow_failure: true
  when: manual
  variables:
    FILE: service

notify-done:
  stage: post-deployment
  when: on_success
  image: appropriate/curl
  allow_failure: true
  script:
  - curl -XGET "192.241.135.40:15474/notify_done?service=jenkins_jr&branch=$CI_COMMIT_TAG&deployer=${DEPLOYER//@}&roles=jenkins_jr-web-production&ci_pipeline_id=$CI_PIPELINE_ID"
  only:
  - triggers

notify-failed:
  stage: post-deployment
  when: on_failure
  image: appropriate/curl
  allow_failure: true
  script:
    - curl -XGET "192.241.135.40:15474/notify_failed?service=jenkins_jr&branch=$CI_COMMIT_TAG&deployer=${DEPLOYER//@}&roles=jenkins_jr-web-production&ci_pipeline_id=$CI_PIPELINE_ID"
  only:
  - triggers

migration-run:
  image: registry.bukalapak.io/sre/migration:0.0.1
  stage: migrate
  variables:
    RAILS_ENV: production
  script:
  - envconsul -once -consul=$CONSUL_ADDR -sanitize -upcase -prefix=$CI_PROJECT_NAME migration db:migrate
  only:
  - triggers
  when: manual

migration-create:
  image: registry.bukalapak.io/sre/migration:0.0.1
  stage: migrate
  variables:
    RAILS_ENV: production
  script:
  - envconsul -once -consul=$CONSUL_ADDR -sanitize -upcase -prefix=$CI_PROJECT_NAME migration db:create
  only:
  - triggers
  when: manual
